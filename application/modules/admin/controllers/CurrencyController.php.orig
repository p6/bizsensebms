<?php
/** Copyright (c) 2010, Sudheera Satyanarayana - http://techchorus.net, 
     Binary Vibes Information Technologies Pvt. Ltd. and contributors
 *  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   * Neither the names of Sudheera Satyanarayana nor the names of the project
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

class Admin_CurrencyController extends Zend_Controller_Action 
{
    public $db;

    public function init()
    {
        $this->db = Zend_Registry::get('db');
    }
        
    /**
     * Display a list of currencies
     */
    public function indexAction() 
    {
        $db = Zend_Registry::get('db');
        $select = $db->select();
        $select->from(array('c'=>'currency'),
                    array('currency_id', 'name', 'symbol', 'description'));

        $paginator = new Zend_Paginator(new Zend_Paginator_Adapter_DbSelect($select));

        $paginator->setCurrentPageNumber($this->_getParam('page'));

        $this->view->paginator = $paginator;

         
    }

    /**
     * Add a currency to the database
     */
    public function addAction()
    {
       $form = new Core_Form_Currency_Create;
       
       if ($this->_request->isPost()) {

            if ($form->isValid($_POST)) {
                $data = $form->getValues();
                unset($data['submit']);    
                $this->db->insert('currency', $data);
                $this->_helper->FlashMessenger('Currency added');
                $this->_redirect('/admin/currency');
            } else {
               $form->populate($_POST);

               $this->view->form = $form;
            }

        } else {

           $this->view->form = $form;
        }  
    }

    /**
     * Edit the currency
     */
    public function editAction()
    {
        $currencyId = $this->_getParam('currency_id');
        $form = new Core_Form_Currency_Edit($currencyId);
        $form->setAction($this->view->url(array(
                'module'        =>  'admin',
                'controller'    =>  'currency',
                'action'        =>  'edit',
                'currency_id'   =>  $currencyId,
            ), null, true
        ));        
       
        if ($this->_request->isPost()) {

            if ($form->isValid($_POST)) {
                $currency = new Core_Model_Currency($currencyId);
                $currency->edit($form->getValues());
                $this->_helper->FlashMessenger('Currency has been edited');
                $this->_redirect($this->view->url(array(
                        'module'        =>  'admin',
                        'controller'    =>  'currency',
                        'action'        =>  'index',
                    ), null, true
                ));
            } else {
               $form->populate($_POST);
               $this->view->form = $form;
            }

        } else {

           $this->view->form = $form;
        }  
    }

    /**
     * Delete the currency
     */
    public function deleteAction()
    {
        $cForm = new BV_Form_Confirm;

        $currencyId = $this->_getParam('currency_id');
        $url = $this->view->url(array(
                    'module'        =>  'admin',
                    'controller'    =>  'currency',
                    'action'        =>  'index',
                    )
               );

        $action = $url;
        $form = $cForm->getForm();
   
        $currency = new Core_Model_Currency($currencyId);
       
        if ($this->_request->isPost()) {

            if ($form->isValid($_POST) and $this->_getParam('yes') == 'Yes') {

                $deleted = $currency->delete();

                if ($deleted) {
                    $this->_helper->FlashMessenger('Currency deleted');
                } else {
                    $this->_helper->FlashMessenger('Currency could not be deleted');
                }    
                $this->_redirect($this->view->url(array(
                    'module'=>'admin', 'controller'=>'currency', 'action'=>'index'), null, true)
                );
            } else {
                $this->_redirect($url);
            }


        } else {
            $this->view->currency = $currency->fetch();      
            $this->view->form = $form;
        }        
       
    }



} 
